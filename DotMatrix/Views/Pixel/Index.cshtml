@using DotMatrix.Base.Extensions
@model DotMatrix.Common.Pixel.PixelViewlModel
@{
	ViewBag.Title = "Pixels";
	var width = DotMatrix.Enums.Constant.Width;
	var height = DotMatrix.Enums.Constant.Height;
	var cacheBreak = DateTime.UtcNow.ToUnixTime();
}

<style>
</style>

<div class="d-flex flex-column h-100">

	<div style="display:flex;justify-content:center;">
		<div class="d-flex justify-content-between" style="border: solid 0px red;padding:5px">

			<div class="mr-4">
				<div>
					<small>Location</small>
				</div>
				<table style="font-size:13px">
					<tr>
						<td>X: </td>
						<td width="40px"><b id="location-x">0</b></td>
						<td>Y: </td>
						<td width="40px"><b id="location-y">0</b></td>
					</tr>
				</table>
				<table style="font-size:13px">
					<tr>
						<td width="45px">Points: </td>
						<td><b id="user-points">@Model.Points</b></td>
					</tr>
				</table>
			</div>

			<div class="mr-4">
				<div>
					<small>Zoom</small>
				</div>
				<div class="btn-toolbar" role="toolbar">
					<div class="btn-group" role="group">
						<button id="pixel-zoomout" type="button" class="btn btn-sm btn-secondary p-1" disabled="disabled">
							<div style="width:20px;height:20px;">
								<i class="fal fa-search-minus"></i>
							</div>
						</button>
						<button id="pixel-zoomin" type="button" class="btn btn-sm btn-secondary p-1">
							<div style="width:20px;height:20px;">
								<i class="fal fa-search-plus"></i>
							</div>
						</button>
					</div>
				</div>
			</div>

			<div class="mr-4">
				<div>
					<small>Pixel Color</small>
				</div>
				<div class="d-flex">
					<div class="btn-toolbar" role="toolbar">
						<div class="btn-group btn-group-sm mr-1" role="group">
							<button type="button" class="btn btn-secondary p-1" style="pointer-events:none">
								<div id="color-picker-selected" style="width:20px;height:20px;background-color:#000000"></div>
							</button>
						</div>
					</div>

					<div id="color-picker" class="btn-toolbar" role="toolbar">
						<div class="btn-group btn-group-sm" role="group">
							<button id="color-dropdown" type="button" class="btn btn-secondary p-1">
								<div class="d-flex justify-content-between align-content-center align-items-center">
									<div id="color-dropdown-selected" style="width:20px;height:20px;background-color:#000000"></div>
									<i class="fa fa-caret-down ml-1" style="font-size:larger"></i>
								</div>
							</button>
						</div>
					</div>

					<div class="btn-toolbar" role="toolbar">
						<div class="btn-group btn-group-sm ml-1" role="group">
							<button id="eyedrop-toggle" type="button" class="btn btn-secondary p-1 disabled">
								<div style="width:20px;height:20px;">
									<i class="fal fa-eye-dropper"></i>
								</div>
							</button>
						</div>
					</div>
				</div>
			</div>

			<div class="mr-4">
				<div>
					<small style="white-space:nowrap">Max Points</small>
				</div>
				<input id="max-points" type="number" class="form-control form-control-sm btn-secondary" value="8" style="max-width:70px" />
			</div>

			<div class="mr-4">
				<div>
					<small>Selected Pixel</small>
				</div>
				<div class="d-flex">
					<div>
						<table style="font-size:13px">
							<tr>
								<td>X: </td>
								<td width="40px"><b id="selected-x">0</b></td>
								<td>Y: </td>
								<td width="40px"><b id="selected-y">0</b></td>
							</tr>
						</table>
						<table style="font-size:13px">
							<tr>
								<td width="45px">Points: </td>
								<td> <b id="selected-points">1</b></td>
							</tr>
						</table>
					</div>
					<div>
						<table style="font-size:13px;width:160px;table-layout:fixed">
							<tr>
								<td width="50px">Team: </td>
								<td class="cell-elipsis"><b id="selected-team">-</b></td>
							</tr>
							<tr>
								<td>Owner: </td>
								<td class="cell-elipsis"><b id="selected-user">-</b></td>
							</tr>
						</table>
					</div>
				</div>
			</div>

			<div>
				<div>
					<small>Settings</small>
				</div>
				<div class="d-flex flex-column" style="font-size:13px">
					<small><input id="log-toggle" type="checkbox" /> Show Log</small>
					<small><input id="transparent-toggle" type="checkbox" /> Show Transparent</small>
					@*<small class="ml-2"><input id="log-user-toggle" type="checkbox" /> Log Users</small>
						<small class="ml-2"><input id="log-api-toggle" type="checkbox" /> Log Api Users</small>*@
				</div>
			</div>
		</div>
	</div>

	<div style="display:flex;justify-content:center;">
		<div id="canvas-container" style="height:@(height + 8)px;overflow:auto;border:solid 1px #101010;" class="zoomed-out">
			<canvas id="mainCanvas" style="background:transparent" width="@width" height="@height"></canvas>
		</div>

		<div id="log-window" style="height:@(height + 8)px;overflow:hidden;min-width:320px;border:solid 1px #101010;display:none">
			<ul style="font-size:10px;list-style:none;padding-inline-start:5px" id="infolog"></ul>
		</div>
	</div>
	<div style="display:flex;justify-content:center;">
		<p><i class="fal fa-info-circle"></i> Use left click to select pixels, Use right click to draw pixels</p>
	</div>
</div>

<script id="logPixelTemplate" type="text/html">
	<li>
		<span><i class="fa fa-stop" style="width:14px;text-align:center;color:{{Color}}"></i>{{Owner}} added pixel @@ X: {{X}}, Y: {{Y}}</span>
	</li>
</script>

<script id="logPrizeTemplate" type="text/html">
	<li>
		<span><i class="fa fa-star" style="width:14px;text-align:center;"></i>{{PrizeUser}} won prize <b>{{PrizeName}}</b> @@ X: {{X}}, Y: {{Y}}</span>
	</li>
</script>

<script id="logErrorTemplate" type="text/html">
	<li>
		<span class="text-danger"><i class="fa fa-exclamation-square" style="width:14px;text-align:center;"></i>Error: {{Message}}</span>
	</li>
</script>

<script id="errorNotifyTemplate" type="text/html">
	<div class="toast bg-danger" role="alert" aria-live="assertive" aria-atomic="true" data-delay="2500">
		<div class="toast-header">
			<strong class="mr-auto">Error</strong>
			<small class="text-muted">just now</small>
			<button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
				<span aria-hidden="true">&times;</span>
			</button>
		</div>
		<div class="toast-body">
			<div class="text-center">
				{{Message}}
			</div>
		</div>
	</div>
</script>

<script id="prizeNotifyTemplate" type="text/html">
	<div class="toast bg-success" role="alert" aria-live="assertive" aria-atomic="true" data-delay="10000">
		<div class="toast-header">
			<strong class="mr-auto">{{PrizeName}}</strong>
			<small class="text-muted">just now</small>
			<button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
				<span aria-hidden="true">&times;</span>
			</button>
		</div>
		<div class="toast-body">
			<div class="text-center">
				Congratulations you have won!
			</div>
			<div class="text-center">
				<b style="font-size:larger">{{PrizeDescription}}</b>
			</div>
		</div>
	</div>
</script>



@section Scripts {
	<link href="~/Content/spectum.css" rel="stylesheet" />
	<script src="~/Scripts/spectrum.js"></script>
	<script src="~/Scripts/mustache.js"></script>
	<script>
		(async ($) => {

			const canvasWidth = @width;
			const canvasHeight = @height;
			const cacheBuster = '@cacheBreak';
			const userName = '@User.Identity.Name';

			const pixelHub = $.connection.pixelHub;

			let showLogging = true;
			let showUserLogging = false;
			let showApiLogging = false;
			const loggingWindow = $("#infolog");
			const logPixelTemplate = $("#logPixelTemplate").html();
			const logPrizeTemplate = $("#logPrizeTemplate").html();
			const logErrorTemplate = $("#logErrorTemplate").html();
			const prizeNotifyTemplate = $("#prizeNotifyTemplate").html();
			const errorNotifyTemplate = $("#errorNotifyTemplate").html();

			let scale = 1;
			const canvas = document.getElementById('mainCanvas');
			const context = canvas.getContext('2d');
			let selectedColor = '#000000'; //black

			let smallLoaded = 0;
			let largeLoaded = 0;
			let isSmallLoaded = false;
			let isLargeLoaded = false;
			const backgroundSmall = []
			const backgroundLarge = []

			let eyedropperEnabled = false;

			const initializeCanvas = () => {
				for (let i = 0; i < 16; i++) {
					const bgs = new Image();
					const bgl = new Image();
					bgs.src = "../Content/Images/Pixel/background-small-" + i + ".png?v=" + cacheBuster;
					bgl.src = "../Content/Images/Pixel/background-large-" + i + ".png?v=" + cacheBuster;
					bgs.onload = function () {
						smallLoaded++;
						if (smallLoaded == 16) {
							isSmallLoaded = true;
						}
					}
					bgl.onload = async function () {
						largeLoaded++;
						if (largeLoaded == 16) {
							isLargeLoaded = true;
							await initializeGame();
						}
					}
					backgroundSmall.push(bgs);
					backgroundLarge.push(bgl);
				}

				canvas.addEventListener('mousedown', function (e) { e.preventDefault(); }, false);
				canvas.addEventListener('click', async function (evt) {
					evt.preventDefault();
					evt.stopImmediatePropagation();

					const mousePos = getMousePos(canvas, evt);
					const getPixelRequest = {
						x: parseInt(mousePos.x / scale),
						y: parseInt(mousePos.y / scale)
					}

					const pixelResponse = await getServerPixel(getPixelRequest);
					if (pixelResponse === undefined) {
						return;
					}

					setSelectedPixel(pixelResponse);
				});
				canvas.addEventListener('contextmenu', async function (evt) {
					evt.preventDefault();
					evt.stopImmediatePropagation();

					const mousePos = getMousePos(canvas, evt);
					let addPixelRequest = {
						x: parseInt(mousePos.x / scale),
						y: parseInt(mousePos.y / scale),
						color: selectedColor,
						maxPoints: $("#max-points").val()
					}

					await addServerPixel(addPixelRequest);
				}, false);

				canvas.addEventListener('mousemove', function (evt) {
					const mousePos = getMousePos(canvas, evt);
					const locationData = {
						x: parseInt(mousePos.x / scale),
						y: parseInt(mousePos.y / scale)
					}
					setLocation(locationData)
				}, false);
			}

			const initializeGame = async () => {
				await resetCanvas(backgroundSmall)
				await getServerUpdates();

				pixelHub.client.OnPixelUpdate = function (result) {
					addCanvasPixel(result.X, result.Y, result.Color);
					updateSelectedPixel(result);
					logPixel(result);
				};

				pixelHub.client.OnPrizeUpdate = function (result) {
					logPrize(result);
				};

				pixelHub.client.OnPointsUpdate = function (result) {
					updatePoints(result);
				}

				pixelHub.client.OnNewPrize = function (result) {
					notifyPrize(result);
				}

				await $.connection.hub.start();
			}

			const resetCanvas = async (backgrounds) => {
				canvas.height = canvasHeight * scale;
				canvas.width = canvasWidth * scale;
				context.setTransform(1, 0, 0, 1, 0, 0);
				context.clearRect(0, 0, canvas.width, canvas.height);
				let index = 0;
				const sizeX = (canvasWidth * scale) / 4;
				const sizeY = (canvasHeight * scale) / 4;
				for (let y = 0; y < 4; y++) {
					for (let x = 0; x < 4; x++) {
						const background = backgrounds[index];
						context.drawImage(background, x * sizeX, y * sizeY)
						index++;
					}
				}
				context.scale(scale, scale);
				await getServerUpdates();
			}

			const addCanvasPixel = async (x, y, color) => {
				context.beginPath();
				context.fillStyle = color,
				context.fillRect(x, y, 1, 1);
				context.closePath();
			}

			const setLocation = (location) => {
					$("#location-x").text(location.x);
					$("#location-y").text(location.y);
			}

			const setSelectedPixel = (pixel) => {
					$("#selected-x").text(pixel.X);
					$("#selected-y").text(pixel.Y);
					$("#selected-color").text(pixel.Color);
					$("#selected-points").html(pixel.Type == 2 ?  "<small><i>Fixed Pixel</i></small>": pixel.Points);
					$("#selected-user").html(pixel.Type == 0 ? "<small><i>Empty Pixel</i></small>" : pixel.Type == 1 ? pixel.Owner : "<small><i>Fixed Pixel</i></small>");
					$("#selected-team").html(pixel.Type == 0 ? "<small><i>Empty Pixel</i></small>" : pixel.Type == 1 ? pixel.Team : "<small><i>Fixed Pixel</i></small>");
					if (eyedropperEnabled === true) {
						setSelectedColor(pixel.Color);
					}
			}

			const updateSelectedPixel = (pixel) => {
				const selectedX = $("#selected-x").text();
				const selectedY = $("#selected-y").text();
				if (selectedX == pixel.X && selectedY == pixel.Y) {
					$("#selected-team").text(pixel.Team);
					$("#selected-owner").text(pixel.Owner);
					$("#selected-points").text(pixel.NewPoints);
				}
			}

			const zoomInCanvas = async () => {
				if (isLargeLoaded === true) {
					scale = 10;
					await resetCanvas(backgroundLarge);
					return true;
				}
				return false;
			}

			const zoomOutCanvas = async () => {
				if (isSmallLoaded === true) {
					scale = 1;
					await resetCanvas(backgroundSmall);
					return true;
				}
				return false;
			}


			const notifyPrize = (prize) => {
				console.log("OnNewPrize", prize);
				$("#toast-container").prepend($(Mustache.render(prizeNotifyTemplate, prize)).toast('show'));
			};

			const notifyError = (error) => {
				$("#toast-container").prepend($(Mustache.render(errorNotifyTemplate, {Message: error})).toast('show'));
			};

			const updatePoints = (result) => {
				$("#user-points").text(result.Points);
			};;


			const addServerPixel = async (data) => {
				if (userName.length == 0) {
					logError("User not logged in.");
					return;
				}
				const result = await postJson('@Url.Action("AddPixel", "Pixel")', data);
				if (result.Success == false) {
					logError(result.Message);
				}
			}

			const getServerPixel = async (data) => {
				const result = await postJson('@Url.Action("GetPixel", "Pixel")', data);
				if (result.Success == false) {
					logError(result.Message);
					return;
				}
				return result.Data;
			}

			const getServerUpdates = async () => {
				const deltas = await getJson('@Url.Action("GetPixels", "Pixel")');
				if (deltas) {
					for (let i = 0; i < deltas.length; i++) {
						const pixel = deltas[i];
						addCanvasPixel(pixel.X, pixel.Y, pixel.Color);
					}
				}
			}


			const setSelectedColor = (color) => {
				selectedColor = color;
				$("#color-dropdown").spectrum("set", color);
				$("#color-picker-selected, #color-dropdown-selected").css("background-color", color);
			}


			const logPixel = (pixel) => {
				if (showLogging === false) {
					return;
				}

				loggingWindow.prepend(Mustache.render(logPixelTemplate, pixel));
			}

			const logPrize = (prize) => {
				if (showLogging === false) {
					return;
				}
				loggingWindow.prepend(Mustache.render(logPrizeTemplate, prize));
			}

			const logError = (error) => {
				if (showLogging === false) {
					return;
				}
				loggingWindow.prepend(Mustache.render(logErrorTemplate, { Message: error }))
				notifyError(error);
			}



			$("#pixel-zoomin").on("click", async function () {
				if (await zoomInCanvas() === true) {
					$(this).attr("disabled", "disabled");
					$("#pixel-zoomout").removeAttr("disabled");
					$("#canvas-container").removeClass("zoomed-out").addClass("zoomed-in");
				}
			});

			$("#pixel-zoomout").on("click", async function () {
				if (await zoomOutCanvas() === true) {
					$(this).attr("disabled", "disabled");
					$("#pixel-zoomin").removeAttr("disabled");
					$("#canvas-container").removeClass("zoomed-in").addClass("zoomed-out");
				}
			});

			$("#transparent-toggle").on("click", async function () {
				const checked = $(this).is(":checked");
				if (checked === true) {
					$("#canvas-container").addClass("checker-board");
					return;
				}
				$("#canvas-container").removeClass("checker-board");
			})

			$(".color-picker-item").on("click", function () {
				setSelectedColor($(this).data("color"));
			});

			$("#log-toggle").on("click", function () {
				const checked = $(this).is(":checked");
				if (checked === true) {
					showLogging = true;
					$("#log-window").show();
					$("#log-user-toggle").prop('checked', true)
					$("#log-api-toggle,#log-user-toggle").removeAttr("disabled");
					return;
				}

				showLogging = false;
				showApiLogging = false;
				showUserLogging = false;
				loggingWindow.empty();
				$("#log-window").hide();
				$("#log-user-toggle,#log-api-toggle").prop('checked', false).attr("disabled", "disabled")
			});


			$("#log-api-toggle").on("click", function () {
				showApiLogging = $(this).is(":checked");
			});

			$("#log-user-toggle").on("click", function () {
				showUserLogging = $(this).is(":checked");
			});



			$("#color-dropdown").spectrum({
				showPalette: true,
				showSelectionPalette: true,
				preferredFormat: "hex",
				showInput: true,
				palette: [ "#FFFFFF","#000000","#FF0000","#00FF00","#0000FF","#FFFF00"],
				change: function(color) {
					setSelectedColor(color.toHexString());
				}
			});



			$("#eyedrop-toggle").on("click", function () {
				const _this = $(this);
				const isDisabled = _this.hasClass("disabled");
				if (isDisabled === true) {
					_this.removeClass("disabled");
					eyedropperEnabled = true;
					return;
				}

				_this.addClass("disabled");
					eyedropperEnabled = false;
			});

			initializeCanvas();

		})(jQuery);

	</script>
}