@using DotMatrix.Base.Extensions
@model DotMatrix.Common.Pixel.PixelViewlModel
@{
	ViewBag.Title = Model.Game.Name;

	var gameId = Model.Game.Id;
	var width = Model.Game.Width;
	var height = Model.Game.Height;
	var cacheBreak = DateTime.UtcNow.ToUnixMin();
}


@Html.AntiForgeryToken()

<style>
	.game-wrapper {
		position: relative;
		width: 100%;
		max-width: 100%;
		height: 100%;
		max-height: 100%;
		display: flex;
		overflow: hidden;
	}

	.game-container {
		width: 100%;
		overflow: hidden;
	}

	.menu-container {
		width: 100%;
		max-width: 400px;
		min-width: 320px;
		overflow: hidden;
	}

	#pixel-finder {
		position: absolute;
		display: none;
		width: 16px;
		height: 16px;
		text-align: center;
		z-index: 2000;
	}

	#canvas-container {
		position: relative;
		margin: auto;
	}

	.canvas-scroll-wrapper {
		height: 100%;
		overflow: hidden;
		padding-left: 5px;
		padding-right: 5px;
	}

	.canvas-scroll-container {
		height: 100%;
		overflow: auto;
	}

	#mainCanvas {
		border: solid 1px rgba(238, 232, 213, 0.325);
		background-color: rgba(238, 232, 213, 0.125);
	}

	#toolbar-window {
		display: flex;
		height: 100%;
		border: solid 1px rgba(238, 232, 213, 0.325);
		background-color: rgba(238, 232, 213, 0.1);
	}

	.game-link {
		margin-left: 5px;
		margin-right: 5px;
		color: #839496 !important;
	}

	.noselect {
		-webkit-touch-callout: none; /* iOS Safari */
		-webkit-user-select: none; /* Safari */
		-khtml-user-select: none; /* Konqueror HTML */
		-moz-user-select: none; /* Old versions of Firefox */
		-ms-user-select: none; /* Internet Explorer/Edge */
		user-select: none; /* Non-prefixed version, currently
																	supported by Chrome, Opera and Firefox */
	}

	input[type=number]::-webkit-inner-spin-button,
	input[type=number]::-webkit-outer-spin-button {
		-webkit-appearance: none;
		-moz-appearance: textfield;
		margin: 0;
	}

	input[type=number] {
		-moz-appearance: textfield;
	}
</style>


<div class="game-wrapper">
	<div class="game-container">
		<div class="d-flex flex-column w-100 h-100">

			<div class="d-flex justify-content-between noselect" style="padding-left:5px;padding-right:5px;">
				<h4 class="mb-0 text-primary">@Model.Game.Name</h4>
				<div class="d-flex flex-wrap justify-content-center" style="font-size: 20px ">
					<a id="prizes-modal" href="#" class="game-link">
						<i class="fa fa-gift"></i>
					</a>
					<a href="/Prizes/GameHistory?gameId=@Model.Game.Id" class="game-link">
						<i class="fa fa-award"></i>
					</a>
					<a href="/Scores/Game?gameId=@Model.Game.Id" class="game-link">
						<i class="fa fa-list-ol"></i>
					</a>
					@*<a href="/Explore?gameId=@Model.Game.Id" class="game-link">
							<i class="fa fa-compass"></i>
						</a>
						<a href="/Replay?gameId=@Model.Game.Id" class="game-link">
							<i class="fa fa-reply"></i>
						</a>*@
				</div>
			</div>



			<div class="d-flex justify-content-between bg-dark noselect" style="padding-left: 5px; padding-right: 5px; padding-bottom: 5px; margin-bottom: 3px; margin-top: 3px">

				<div class="w-100" style="font-size:12px;">

					<div class="d-flex justify-content-between">


						<div class="w-100">

							<small>
								<i>@(string.IsNullOrEmpty(User.Identity.Name) ? "Guest" : User.Identity.Name)</i>
							</small>
							<div style="white-space:nowrap" class="mb-0">Points: <b id="user-points" class=" text-warning">@Model.Points</b></div>

							<div>
								<a data-toggle="collapse" data-target="#collapseMenu" aria-expanded="false" aria-controls="collapseMenu">
									<i style="font-size:28px;margin-top:6px" class="fa fa-caret-circle-down"></i>
								</a>
							</div>

						</div>


						<div class="w-100">
							<small>
								<i>Selected Pixel</i>
							</small>
							<div class="d-flex selected-pos">
								<div style="width:50px">
									<span>X: <b class="text-primary" id="selected-x">0</b></span>
								</div>
								<div style="width:50px">
									<span>Y: <b class="text-primary" id="selected-y">0</b></span>
								</div>
							</div>
							<div>
								<span>Points: <b class="text-primary" id="selected-points">0</b></span>
							</div>
							<div>
								<span>Player: <b class="text-primary" id="selected-user">-</b></span>
							</div>
						</div>
					</div>

				</div>



				<div class="w-75" style="font-size:12px;">


					<div class="d-flex justify-content-between">

						<div>
							<small>
								<i>Zoom</i>
							</small>
							<div class="btn-toolbar" role="toolbar">
								<div class="btn-group" role="group">
									<button id="pixel-zoomout" type="button" class="btn btn-sm btn-secondary p-1" disabled="disabled" style="border-radius:0">
										<div style="width:23px;height:20px;">
											<i class="fal fa-search-minus"></i>
										</div>
									</button>
									<button id="pixel-zoomin" type="button" class="btn btn-sm btn-secondary p-1" style="border-radius:0">
										<div style="width:23px;height:20px;">
											<i class="fal fa-search-plus"></i>
										</div>
									</button>
								</div>
							</div>
						</div>


						<div class="">
							<small>
								<i>Pixel Color</i>
							</small>
							<div class="d-flex">
								<div id="color-picker" class="btn-toolbar" role="toolbar">
									<div class="btn-group btn-group-sm" role="group">
										<button id="color-dropdown" type="button" class="btn btn-secondary p-1" style="border-radius:0">
											<div class="d-flex justify-content-between align-content-center align-items-center">
												<div id="color-dropdown-selected" style="width:20px;height:20px;background-color:#000000"></div>
												<i class="fa fa-caret-down ml-1" style="font-size:larger"></i>
											</div>
										</button>
									</div>
								</div>
								<div class="btn-toolbar" role="toolbar">
									<div class="btn-group btn-group-sm ml-1" role="group">
										<button id="eyedrop-toggle" type="button" class="btn btn-secondary p-1 disabled" style="border-radius:0">
											<div style="width:20px;height:20px;">
												<i class="fal fa-eye-dropper"></i>
											</div>
										</button>
									</div>
								</div>
							</div>
						</div>
					</div>


					<div class="d-flex justify-content-between">

						<div class="w-100" style="font-size:12px">
							<div class="custom-control custom-checkbox" style="min-height:unset;margin-top:2px">
								<input type="checkbox" class="custom-control-input" id="transparent-toggle">
								<label class="custom-control-label" for="transparent-toggle" style="padding-top:2px">Show Transparent</label>
							</div>
						</div>



					</div>

				</div>
			</div>



			<div class="collapse bg-dark noselect" id="collapseMenu" style="padding-left:5px;padding-right:5px;padding-bottom:5px;margin-bottom:3px;">

				<div class="d-flex flex-column">

					<div class="d-flex justify-content-between">

						<div class="w-100">
							<small>
								<i style="font-size:11px">Find</i>
							</small>
							<div>
								<div class="input-group input-group-sm align-items-center">
									<input id="jump-x" type="number" class="form-control form-control" placeholder="X" style="border-radius:0">
									<div class="input-group-append">
										<button id="jump-send" class="btn btn-secondary" type="button" style="border-radius:0;border:none;margin-left:1px">
											<i class="fa fa-map-marker-alt"></i>
										</button>
									</div>
									<input id="jump-y" type="number" class="form-control form-control-sm" placeholder="Y" style="border-radius:0">

								</div>
							</div>
						</div>

						<div class="w-100">
							<small>
								<i style="font-size:11px;">Max Points</i>
							</small>
							<input id="max-points" type="number" class="form-control form-control-sm btn-secondary" min="1" value="4" style="max-width:70px;border-radius:0" />
						</div>

						<div class="w-100">
							<div class="custom-control custom-checkbox" style="min-height:unset;font-size:12px;white-space:nowrap">
								<input type="checkbox" class="custom-control-input" id="log-toggle-prize">
								<label class="custom-control-label" for="log-toggle-prize">Prize Notifications</label>
							</div>
							<div class="custom-control custom-checkbox" style="min-height:unset;font-size:12px;white-space:nowrap">
								<input type="checkbox" class="custom-control-input" id="log-toggle-pixel">
								<label class="custom-control-label" for="log-toggle-pixel">Pixel Notifications</label>
							</div>
							<div class="custom-control custom-checkbox" style="min-height:unset;font-size:12px;white-space:nowrap">
								<input type="checkbox" class="custom-control-input" id="log-toggle-error">
								<label class="custom-control-label" for="log-toggle-error">Error Notifications</label>
							</div>
						</div>

					</div>

				</div>
			</div>


			<div class="canvas-scroll-wrapper">
				<div class="canvas-scroll-container">
					<div id="canvas-container" style="width:@(width)px;height:@(height)px">
						<div id="pixel-finder">
							<i class="fa fa-map-marker-alt" style="color:#ff0000;text-shadow: 1px 1px 1px black"></i>
						</div>
						<canvas id="mainCanvas" width="@width" height="@height" class="zoomed-out"></canvas>
					</div>
				</div>
			</div>


		</div>
	</div>

</div>







<style>

	#toast-container {
		bottom: 10px !important;
		right: 10px !important;
		width: 200px !important;
	}

	.toast {
		max-width: 200px;
	}

	.toast-header {
		padding: 3px;
		font-size: smaller;
	}

	.toast-body {
		padding: 3px;
		font-size: smaller;
	}
</style>

<script id="infoNotifyTemplate" type="text/html">
	<div class="toast bg-info mb-0" role="alert" aria-live="assertive" aria-atomic="true" data-delay="2500">
		<div class="toast-body">
			<small class="text-white"><i class="fal fa-info-circle"></i> Added <i class="fa fa-square-full" style="width:14px;text-align:center;color:{{color}}"></i> pixel @@ X: {{x}}, Y: {{x}}</small>
		</div>
	</div>
</script>

<script id="errorNotifyTemplate" type="text/html">
	<div class="toast bg-danger mb-0" role="alert" aria-live="assertive" aria-atomic="true" data-delay="2500">
		<div class="toast-body">
			<small class="text-white"><i class="fal fa-exclamation-triangle"></i> {{Message}}</small>
		</div>
	</div>
</script>

<script id="prizeNotifyTemplate" type="text/html">
	<div class="toast bg-warning mb-0" role="alert" aria-live="assertive" aria-atomic="true" data-delay="10000">
		<div class="toast-header">
			<strong class="mr-auto text-warning"><i class="fa fa-trophy"></i> {{Name}}</strong>
			<small class="text-muted">just now</small>
			<button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
				<span aria-hidden="true">&times;</span>
			</button>
		</div>
		<div class="toast-body">
			<div class="text-center text-light">
				Congratulations you have won!
			</div>
			<div class="text-center text-light">
				<b style="font-size: larger">{{Description}}</b>
			</div>
		</div>
	</div>
</script>


<script id="awardNotifyTemplate" type="text/html">
	<div class="toast bg-warning mb-0" role="alert" aria-live="assertive" aria-atomic="true" data-delay="10000">
		<div class="toast-header">
			<strong class="mr-auto text-warning"><i class="fa fa-trophy"></i> {{Level}} Award</strong>
			<small class="text-muted">just now</small>
			<button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
				<span aria-hidden="true">&times;</span>
			</button>
		</div>
		<div class="toast-body">
			<div class="text-center text-light">
				Congratulations you have won!
			</div>
			<div class="text-center text-light">
				<b style="font-size: larger">{{Name}} - {{Points}} points</b>
			</div>
		</div>
	</div>
</script>


@section Scripts {


	<script>
		(async ($) => {

			const gameId = @gameId;
			const canvasWidth = @width;
			const canvasHeight = @height;
			const cacheBuster = '@cacheBreak';
			const userName = '@User.Identity.Name';

			const userSettings = store.get("gameSettings")	|| {
					color: '#000000',
					maxPoints: 2,
					showNotifications: true,
					showTransparent: true,

					showPixelLog: true,
					showPrizeLog: true,
					showErrorLog: true,
					showChatLog: true
			};

			const saveSettings = () => {
				store.set("gameSettings", userSettings);
			}

			const loadSettings = () => {
				setSelectedColor(userSettings.color);
				$("#max-points").val(userSettings.maxPoints);
				toggleTransparentBackground();

				$("#log-toggle-pixel").prop("checked", userSettings.showPixelLog);
				$("#log-toggle-prize").prop("checked", userSettings.showPrizeLog);
				$("#log-toggle-error").prop("checked", userSettings.showErrorLog);
				$("#log-toggle-chat").prop("checked", userSettings.showChatLog);

				$("#transparent-toggle").prop("checked", userSettings.showTransparent);
				$("#jump-x, #jump-y").val(null);
			}



			const pixelHub = $.connection.pixelHub;

			const mainCanvas = $("#mainCanvas");
			const canvasContainer = $("#canvas-container");
			const pixelFinder = $("#pixel-finder");


			const prizeNotifyTemplate = $("#prizeNotifyTemplate").html();
			const awardNotifyTemplate = $("#awardNotifyTemplate").html();
			const errorNotifyTemplate = $("#errorNotifyTemplate").html();
			const infoNotifyTemplate = $("#infoNotifyTemplate").html();

			let scale = 1;
			const canvas = document.getElementById('mainCanvas');
			const context = canvas.getContext('2d');


			let isSmallLoaded = false;
			let isLargeLoaded = false;
			const backgroundSmall = new Image();
			const backgroundLarge = new Image();

			let eyedropperEnabled = false;

			const loadSmallBackground = () => {
				return new Promise(function (resolve, reject) {
					backgroundSmall.src = "../Content/Images/Games/" + gameId + "/background-small.png?v=" + cacheBuster;
					backgroundSmall.onload = function () {
						isSmallLoaded = true;
						return resolve();
					}
					backgroundSmall.onerror = function () {
						return resolve();
					}
				});
			}

			const loadLargeBackground = () => {
				return new Promise(function (resolve, reject) {
					backgroundLarge.src = "../Content/Images/Games/" + gameId + "/background-large.png?v=" + cacheBuster;
					backgroundLarge.onload = function () {
						isLargeLoaded = true;
						return resolve();
					}
					backgroundLarge.onerror = function () {
						return resolve();
					}
				});
			}

			const initializeCanvas = async () => {

				await loadSmallBackground();
				await loadLargeBackground();
				await initializeGame();

				canvas.addEventListener('mousedown', function (e) { e.preventDefault(); }, false);
				canvas.addEventListener('click', async function (evt) {
					evt.preventDefault();
					evt.stopImmediatePropagation();

					const mousePos = getMousePos(canvas, evt);
					const getPixelRequest = {
						gameId: gameId,
						x: parseInt(mousePos.x / scale),
						y: parseInt(mousePos.y / scale)
					}

					const pixelResponse = await getServerPixel(getPixelRequest);
					if (pixelResponse === undefined) {
						return;
					}

					setSelectedPixel(pixelResponse);
				});
				canvas.addEventListener('contextmenu', async function (evt) {
					evt.preventDefault();
					evt.stopImmediatePropagation();

					const mousePos = getMousePos(canvas, evt);
					let addPixelRequest = {
						gameId: gameId,
						x: parseInt(mousePos.x / scale),
						y: parseInt(mousePos.y / scale),
						color: userSettings.color,
						maxPoints: $("#max-points").val()
					}
					setLocation(addPixelRequest)
					await addServerPixel(addPixelRequest);
				}, false);

				canvas.addEventListener('mousemove', function (evt) {
					const mousePos = getMousePos(canvas, evt);
					const locationData = {
						x: parseInt(mousePos.x / scale),
						y: parseInt(mousePos.y / scale)
					}
					setLocation(locationData)
				}, false);
			}

			const initializeGame = async () => {
				await resetCanvas(backgroundSmall)

				pixelHub.client.OnNotifyPixel = function (notification) {
					addCanvasPixel(notification.X, notification.Y, notification.Color);
					updateSelectedPixel(notification);
				};

				//pixelHub.client.OnNotifyPrize = function (notification) {
				//	logPrize(notification);
				//};

				//pixelHub.client.OnNotifyAward = function (notification) {
				//	logAward(notification);
				//};

				pixelHub.client.OnUserNotifyPoints = function (notification) {
					updatePoints(notification);
					notifyPoints(notification);
				}

				pixelHub.client.OnUserNotifyPrize = function (notification) {
					notifyPrize(notification);
				}

				pixelHub.client.OnUserNotifyAward = function (notification) {
					notifyAward(notification);
				}

				//pixelHub.client.OnChatMessage = function (result) {
				//	logChat(result);
				//}

				await $.connection.hub.start();
				await pixelHub.server.joinGame(gameId);
			}

			const resetCanvas = async (background) => {
				canvas.height = canvasHeight * scale;
				canvas.width = canvasWidth * scale;
				canvasContainer.css({ width: canvas.width, height:canvas.height });

				context.setTransform(1, 0, 0, 1, 0, 0);
				context.clearRect(0, 0, canvas.width, canvas.height);
				context.drawImage(background, 0, 0)
				context.scale(scale, scale);

				await getServerUpdates();
			}

			const addCanvasPixel = async (x, y, color) => {
				context.beginPath();
				context.fillStyle = color,
				context.fillRect(x, y, 1, 1);
				context.closePath();
			}



			const setLocation = (location) => {
				$("#location-x").text(location.x);
				$("#location-y").text(location.y);
			}

			const setSelectedPixel = (pixel) => {
				$("#selected-x").text(pixel.X);
				$("#selected-y").text(pixel.Y);
				$("#selected-color").text(pixel.Color);
				if (eyedropperEnabled === true) {
					setSelectedColor(pixel.Color);
				}
				if (pixel.Type == 2) {
					$("#selected-points,#selected-user").html("<small><i>Fixed Pixel</i></small>");
					return;
				}

				$("#selected-points").html(pixel.Points);
				if (pixel.Type == 0) {
					$("#selected-user").html("<small><i>Empty Pixel</i></small>");
					return;
				}

				$("#selected-user").html(pixel.Player);
			}

			const updateSelectedPixel = (pixel) => {
				const selectedX = $("#selected-x").text();
				const selectedY = $("#selected-y").text();
				if (selectedX == pixel.X && selectedY == pixel.Y) {
					$("#selected-team").text(pixel.Team);
					$("#selected-owner").text(pixel.Player);
					$("#selected-points").text(pixel.Points);
				}
			}

			const zoomInCanvas = async () => {
				if (isLargeLoaded === true) {
					scale = 10;
					await resetCanvas(backgroundLarge);
					return true;
				}
				return false;
			}

			const zoomOutCanvas = async () => {
				if (isSmallLoaded === true) {
					scale = 1;
					await resetCanvas(backgroundSmall);
					return true;
				}
				return false;
			}

			const notifyPoints = (notification) => {
				if (userSettings.showPrizeLog === false) {
					return;
				}
				//notification.Points
			};

			const notifyPrize = (notification) => {
				if (userSettings.showPrizeLog === false) {
					return;
				}
				$("#toast-container").prepend($(Mustache.render(prizeNotifyTemplate, notification)).toast('show'));
			};

			const notifyAward = (notification) => {
				if (userSettings.showPrizeLog === false) {
					return;
				}
				notification.AwardLevel = Enums.GetName(Enums.AwardType, notification.AwardLevel);
				$("#toast-container").prepend($(Mustache.render(awardNotifyTemplate, notification)).toast('show'));
			};

			const notifyError = (error) => {
				if (userSettings.showErrorLog === false) {
					return;
				}
				$("#toast-container").prepend($(Mustache.render(errorNotifyTemplate, {Message: error})).toast('show'));
			};

			const notifyPixel = (notification) => {
				if (userSettings.showPixelLog === false) {
					return;
				}
				$("#toast-container").prepend($(Mustache.render(infoNotifyTemplate, notification)).toast('show'));
			};



			const updatePoints = (result) => {
				$("#user-points").text(result.Points);
			};;


			const addServerPixel = async (data) => {
				if (userName.length == 0) {
					notifyError("You must be logged in to create pixels.");
					return;
				}
				const result = await postJson('@Url.Action("AddPixel", "Game")', data);
				if (result.Success == false) {
					notifyError(result.Message);
					return;
				}
				notifyPixel(data);
			}

			const getServerPixel = async (data) => {
				const result = await postJson('@Url.Action("GetPixel", "Game")', data);
				if (result.Success == false) {
					notifyError(result.Message);
					return;
				}
				return result.Data;
			}

			const getServerUpdates = async () => {
				const deltas = await getJson('@Url.Action("GetPixels", "Game", new { gameId = Model.Game.Id})');
				if (deltas) {
					for (let i = 0; i < deltas.length; i++) {
						const pixel = deltas[i];
						addCanvasPixel(pixel.X, pixel.Y, pixel.Color);
					}
				}
			}


			const setSelectedColor = (color) => {
				userSettings.color = color;
				saveSettings();
				$("#color-dropdown").spectrum("set", color);
				$("#color-picker-selected, #color-dropdown-selected").css("background-color", color);
			}


			$("#log-toggle-pixel").on("click", function () {
				userSettings.showPixelLog = $(this).is(":checked");
				saveSettings();
			});

			$("#log-toggle-prize").on("click", function () {
				userSettings.showPrizeLog = $(this).is(":checked");
				saveSettings();
			});

			$("#log-toggle-error").on("click", function () {
				userSettings.showErrorLog = $(this).is(":checked");
				saveSettings();
			});

			$("#log-toggle-chat").on("click", function () {
				userSettings.showChatLog = $(this).is(":checked");
				saveSettings();

				$("#chat-container").hide();
				if (userSettings.showChatLog === true) {
					$("#chat-container").show();
				}
			});


			$("#pixel-zoomin").on("click", async function () {
				if (await zoomInCanvas() === true) {
					$(this).attr("disabled", "disabled");
					$("#pixel-zoomout").removeAttr("disabled");
					mainCanvas.removeClass("zoomed-out").addClass("zoomed-in");
					pixelFinder.hide();
				}
			});

			$("#pixel-zoomout").on("click", async function () {
				if (await zoomOutCanvas() === true) {
					$(this).attr("disabled", "disabled");
					$("#pixel-zoomin").removeAttr("disabled");
					mainCanvas.removeClass("zoomed-in").addClass("zoomed-out");
					pixelFinder.hide();
				}
			});

			$("#transparent-toggle").on("click", async function () {
				userSettings.showTransparent = $(this).is(":checked");
				saveSettings();
				toggleTransparentBackground();
			})

			const toggleTransparentBackground = () => {
				mainCanvas.removeClass("checker-board");
				if (userSettings.showTransparent === true) {
					mainCanvas.addClass("checker-board");
				}
			}




			$(".color-picker-item").on("click", function () {
				setSelectedColor($(this).data("color"));
			});

			$("#color-dropdown").spectrum({
				showPalette: true,
				showSelectionPalette: true,
				hideAfterPaletteSelect:true,
				preferredFormat: "hex",
				showInput: true,
				palette: [ "#FFFFFF","#000000","#FF0000","#00FF00","#0000FF","#FFFF00"],
				change: function(color) {
					setSelectedColor(color.toHexString());
				}
			});



			$("#eyedrop-toggle").on("click", function () {
				const _this = $(this);
				const isDisabled = _this.hasClass("disabled");
				if (isDisabled === true) {
					_this.removeClass("disabled").addClass("btn-warning");
					eyedropperEnabled = true;
					return;
				}

				_this.addClass("disabled").removeClass("btn-warning");
					eyedropperEnabled = false;
			});


			$("#prizes-modal").on("click", async function () {
				await openModalGet("/Prizes/ViewPrizesModal", { gameId: gameId });
			});


			pixelFinder.on("click", function () {
				pixelFinder.hide();
			});


			$("#log-window").on("click",".location-jump" ,function () {
				const _this = $(this);
				const x = _this.data("x");
				const y = _this.data("y");
				jumpToLocation(x, y);
			});


			const jumpToLocation = (x, y) => {

				const posx = x * scale;
				const posy = y * scale;
				const scrollContainer = $(".canvas-scroll-container");

				const containerWidth = scrollContainer.width();
				const containerHeight = scrollContainer.height();


				const deltaX = containerWidth / 8;
				const deltaY = containerHeight / 8;
				if (posx > (containerWidth - deltaX) || posx < (containerWidth - deltaX)) {
						scrollContainer.scrollLeft(posx - (containerWidth / 2));
				}


				if (posy > (containerHeight - deltaY) || posy < (containerHeight - deltaY)) {
				 scrollContainer.scrollTop(posy - (containerHeight / 2));
				}
				if (scale > 1) {
					pixelFinder.css({ left: posx - 2, top: posy - 20, "font-size": "22px" }).show();
					return;
				}
				pixelFinder.css({ left: posx - 7, top: posy - 17, "font-size": "14px" }).show();
			}

			$("#chat-send").on("click", async function () {
				const _this = $(this);
				const messageBox = $("#chat-message");
				const message = messageBox.val();
				if (message.length == 0) {
					return;
				}
				_this.attr("disabled", "disabled");
				messageBox.attr("disabled", "disabled");

				const dataMessage = message.substring(0, Math.min(240, message.length));
				await pixelHub.server.sendChatMessage(dataMessage);
				messageBox.val(null);
				messageBox.removeAttr("disabled");
				_this.removeAttr("disabled");
			})

			$("#chat-message").on("keyup", function (e) {
				if (e.keyCode == 13) {
					$("#chat-send").trigger("click");
				}
			});


			$("#jump-send").on("click", function () {
				const posX = Number($("#jump-x").val()) || 0;
				const posY = Number($("#jump-y").val() || 0);
				if (posX < 0 || posX > (canvasWidth - 1)) {
					$("#jump-x").addClass("text-danger");
					pixelFinder.hide();
					return;
				}
				if (posY < 0 || posY > (canvasHeight - 1)) {
					$("#jump-y").addClass("text-danger");
					pixelFinder.hide();
					return;
				}

				$("#jump-x, #jump-y").removeClass("text-danger")
				jumpToLocation(posX, posY);
			});

			$("#max-points").on("keyup change paste", function () {
				const value = Number($(this).val()) || 1;
				userSettings.maxPoints = Math.max(1, value);
				saveSettings();
			});

			$(".selected-pos").on("click", function () {
				$("#jump-x").val($("#selected-x").text());
				$("#jump-y").val($("#selected-y").text());
			})

			loadSettings();
			initializeCanvas();

		})(jQuery);

	</script>
}
