@using BitPixel.Base.Extensions
@model BitPixel.Common.Pixel.PixelViewlModel
@{
	ViewBag.Title = Model.Game.Name;

	var gameId = Model.Game.Id;
	var width = Model.Game.Width;
	var height = Model.Game.Height;
	var teamColor = Model.Team?.Color;
	var teamRequired = Model.Game.Type == BitPixel.Enums.GameType.TeamBattle && Model.Team == null;
	var gameEndTimeUnix = Model.Game.EndTime?.ToUnixMs() ?? 0;
	var dateTimeNowUnix = DateTime.UtcNow.ToUnixMs();
}


@Html.AntiForgeryToken()

<style>

	.canvas-scroll-wrapper {
		padding-left: 5px;
		padding-right: 5px;
	}

	#toolbar-window {
		display: flex;
		height: 100%;
		border: solid 1px rgba(238, 232, 213, 0.325);
		background-color: rgba(238, 232, 213, 0.1);
	}

	.game-link {
	
		border-radius: 0;
		margin: 1px;
		width: 32px;
		height: 32px;
	}

	.noselect {
		-webkit-touch-callout: none; /* iOS Safari */
		-webkit-user-select: none; /* Safari */
		-khtml-user-select: none; /* Konqueror HTML */
		-moz-user-select: none; /* Old versions of Firefox */
		-ms-user-select: none; /* Internet Explorer/Edge */
		user-select: none; /* Non-prefixed version, currently */
	}

	input[type=number]::-webkit-inner-spin-button,
	input[type=number]::-webkit-outer-spin-button {
		-webkit-appearance: none;
		-moz-appearance: textfield;
		margin: 0;
	}

	input[type=number] {
		-moz-appearance: textfield;
	}
</style>


<div class="game-wrapper">
	<div class="game-container">
		<div class="d-flex flex-column w-100 h-100">

			<div class="d-flex justify-content-between align-items-center noselect" style="padding-left:5px;padding-right:5px;">
				<div class="d-flex flex-column cell-elipsis">
					<div>	<h4 class="mb-0 text-primary cell-elipsis">@Model.Game.Name</h4></div>
					<small class="cell-elipsis">@Model.Game.Description fasufghoasifpoasiyufp9oas9yuf</small>
				</div>
				<div class="d-flex" style="font-size: 20px">
					<a id="prizes-modal" href="#" class="game-link btn btn-sm btn-outline-secondary text-primary">
						<i class="fa fa-gift"></i>
					</a>
					<a href="/Prizes/GameHistory?gameId=@Model.Game.Id" class="game-link btn btn-sm btn-outline-secondary text-primary">
						<i class="fa fa-award"></i>
					</a>
					<a href="/Scores/Game?gameId=@Model.Game.Id" class="game-link btn btn-sm btn-outline-secondary text-primary">
						<i class="fa fa-list-ol"></i>
					</a>
					@*<a href="/Explore?gameId=@Model.Game.Id" class="game-link">
							<i class="fa fa-compass"></i>
						</a>
						<a href="/Replay?gameId=@Model.Game.Id" class="game-link">
							<i class="fa fa-reply"></i>
						</a>*@
				</div>
			</div>



			<div class="d-flex justify-content-between bg-dark noselect" style="padding-left: 5px; padding-right: 5px; padding-bottom: 5px; margin-bottom: 3px; margin-top: 3px">

				<div class="w-100" style="font-size:12px;">

					<div class="d-flex justify-content-between">


						<div class="w-100">

							<small>
								<i>@(string.IsNullOrEmpty(User.Identity.Name) ? "Guest" : User.Identity.Name)</i>
							</small>
							<div style="white-space:nowrap" class="mb-0">Points: <b id="user-points" class=" text-warning">@Model.Points</b></div>

							<div>
								<a data-toggle="collapse" data-target="#collapseMenu" aria-expanded="false" aria-controls="collapseMenu">
									<i style="font-size:28px;margin-top:6px" class="fa fa-caret-circle-down text-primary"></i>
								</a>
							</div>

						</div>


						<div class="w-100">
							<small>
								<i>Selected Pixel</i>
							</small>
							<div class="d-flex selected-pos">
								<div style="width:50px">
									<span>X: <b class="text-primary" id="selected-x">0</b></span>
								</div>
								<div style="width:50px">
									<span>Y: <b class="text-primary" id="selected-y">0</b></span>
								</div>
							</div>
							<div>
								<span>Points: <b class="text-primary" id="selected-points">0</b></span>
							</div>
							<div>
								<span>Player: <b class="text-primary" id="selected-user">-</b></span>
							</div>
						</div>
					</div>

				</div>



				<div class="w-75" style="font-size:12px;">


					<div class="d-flex justify-content-between">

						<div>
							<small>
								<i>Zoom</i>
							</small>
							<div class="btn-toolbar" role="toolbar">
								<div class="btn-group" role="group">
									<button data-scale="1" type="button" class="pixel-zoom btn btn-sm btn-secondary btn-warning p-1" disabled="disabled" style="border-radius:0">
										<div class="d-flex justify-content-center align-items-center" style="width:20px;height:20px;font-size:9px">
											<i class="fal fa-search"></i>
										</div>
									</button>
									<button data-scale="10" type="button" class="pixel-zoom btn btn-sm btn-secondary p-1" style="border-radius:0">
										<div class="d-flex justify-content-center align-items-center" style="width:20px;height:20px;font-size:13px">
											<i class="fal fa-search"></i>
										</div>
									</button>
									<button data-scale="15" type="button" class="pixel-zoom btn btn-sm btn-secondary p-1" style="border-radius:0">
										<div class="d-flex justify-content-center align-items-center" style="width:20px;height:20px;font-size:16px">
											<i class="fal fa-search"></i>
										</div>
									</button>
								</div>
							</div>
						</div>

						@if (Model.Game.Type == BitPixel.Enums.GameType.TeamBattle)
						{
							<div>
								<div>
									<i style="font-size:11px">Team</i>
								</div>
								<div class="d-flex">

									<div class="input-group input-group-sm align-items-center">
										@if (Model.Team == null)
										{
											<span class="change-team form-control border-1 border-secondary" style="border-radius:0">
												<i style="font-size:20px;color:red" class="fad fa-ban"></i>
											</span>
										}
										else
										{
											<div class="form-control border-1 border-secondary" style="border-radius:0">
												<div class="d-flex align-items-center">
													<i style="font-size:20px;color:@Model.Team.Color" class="@(string.IsNullOrEmpty( Model.Team.Icon) ? "fa fa-square-full" : Model.Team.Icon)"></i>
												</div>
											</div>
										}
										<div class="input-group-append">
											<button class="change-team btn btn-secondary" type="button" style="border-radius:0">
												<i class="fa fa-exchange"></i>
											</button>
										</div>
									</div>
								</div>
							</div>
						}
						else
						{
							<div class="">
								<div>
									<i style="font-size:11px">Pixel Color</i>
								</div>
								<div class="d-flex">
									<div id="color-picker" class="btn-toolbar" role="toolbar">
										<div class="btn-group btn-group-sm" role="group">
											<button id="color-dropdown" type="button" class="btn btn-secondary p-1" style="border-radius:0">
												<div class="d-flex justify-content-between align-content-center align-items-center">
													<div id="color-dropdown-selected" style="width:20px;height:20px;background-color:#000000"></div>
													<i class="fa fa-caret-down ml-1" style="font-size:larger"></i>
												</div>
											</button>
										</div>
									</div>
									<div class="btn-toolbar" role="toolbar">
										<div class="btn-group btn-group-sm ml-1" role="group">
											<button id="eyedrop-toggle" type="button" class="btn btn-secondary p-1 disabled" style="border-radius:0">
												<div style="width:20px;height:20px;">
													<i class="fal fa-eye-dropper"></i>
												</div>
											</button>
										</div>
									</div>
								</div>
							</div>
						}


					</div>


					<div class="d-flex justify-content-between">

						<div class="d-flex justify-content-between w-100" style="font-size:12px">
							<div class="custom-control custom-checkbox" style="min-height:unset;margin-top:2px">
								<input type="checkbox" class="custom-control-input" id="transparent-toggle">
								<label class="custom-control-label" for="transparent-toggle" style="padding-top:2px">Empty</label>
							</div>
							<div class="custom-control custom-checkbox" style="min-height:unset;margin-top:2px">
								<input type="checkbox" class="custom-control-input" id="overlay-toggle">
								<label class="custom-control-label" for="overlay-toggle" style="padding-top:2px">Overlay</label>
							</div>
						</div>



					</div>

				</div>
			</div>



			<div class="collapse bg-dark noselect" id="collapseMenu" style="padding-left:5px;padding-right:5px;padding-bottom:5px;margin-bottom:3px;">

				<div class="d-flex flex-column">

					<div class="d-flex justify-content-between">

						<div class="w-100">
							<small>
								<i style="font-size:11px">Find</i>
							</small>
							<div>
								<div class="input-group input-group-sm align-items-center">
									<input id="jump-x" type="number" class="form-control form-control border-1 border-secondary" placeholder="X" style="border-radius:0">
									<div class="input-group-append">
										<button id="jump-send" class="btn btn-secondary" type="button" style="border-radius:0;margin-left:1px">
											<i class="fa fa-map-marker-alt"></i>
										</button>
									</div>
									<input id="jump-y" type="number" class="form-control form-control-sm border-1 border-secondary" placeholder="Y" style="border-radius:0">

								</div>
							</div>
						</div>

						<div class="w-100 ml-2">
							<small>
								<i style="font-size:11px;">Spend Limit</i>
							</small>
							<input id="max-points" type="number" class="form-control form-control-sm btn-secondary" min="1" value="4" style="max-width:70px;border-radius:0" />
						</div>

						<div class="w-100">
							<div class="custom-control custom-checkbox" style="min-height:unset;font-size:12px;white-space:nowrap">
								<input type="checkbox" class="custom-control-input" id="log-toggle-prize">
								<label class="custom-control-label" for="log-toggle-prize">Prize Notifications</label>
							</div>
							<div class="custom-control custom-checkbox" style="min-height:unset;font-size:12px;white-space:nowrap">
								<input type="checkbox" class="custom-control-input" id="log-toggle-pixel">
								<label class="custom-control-label" for="log-toggle-pixel">Pixel Notifications</label>
							</div>
							<div class="custom-control custom-checkbox" style="min-height:unset;font-size:12px;white-space:nowrap">
								<input type="checkbox" class="custom-control-input" id="log-toggle-error">
								<label class="custom-control-label" for="log-toggle-error">Error Notifications</label>
							</div>
						</div>

					</div>
					<div>
						<span>
							<i style="font-size:11px">Finish:</i>
							@if (Model.Game.EndType == BitPixel.Enums.GameEndType.LastPixel)
							{
								<small><i class="text-primary">Last Pixel Filled</i></small>
							}
							else
							{
								<span id="gameTimer" class="countdown text-primary ml-2" title="@Model.Game.EndTime.Value.ToLongDateString() @Model.Game.EndTime.Value.ToLongTimeString() (UTC)">00:00:00</span>
							}
						</span>
					</div>
				</div>
			</div>


			<div class="canvas-scroll-wrapper">
				<div id="canvas-scroll-container">
					<div id="canvas-container" style="width:@(width)px;height:@(height)px" class="scale-1">
						<div id="pixel-finder">
							<i class="fa fa-map-marker-alt" style="color:#ff0000;text-shadow: 1px 1px 1px black"></i>
						</div>
						<div id="pixel-overlay" class="scale-1"></div>
						<canvas id="mainCanvas" width="@width" height="@height"></canvas>
					</div>
				</div>
			</div>


		</div>
	</div>

</div>







<style>

	#toast-container {
		bottom: 10px !important;
		right: 10px !important;
		width: 200px !important;
	}

	.toast {
		max-width: 200px;
	}

	.toast-header {
		padding: 3px;
		font-size: smaller;
	}

	.toast-body {
		padding: 3px;
		font-size: smaller;
	}
</style>

<script id="infoNotifyTemplate" type="text/html">
	<div class="toast bg-info mb-0" role="alert" aria-live="assertive" aria-atomic="true" data-delay="2500">
		<div class="toast-body">
			<small class="text-white"><i class="fal fa-info-circle"></i> Added <i class="fa fa-square-full" style="width:14px;text-align:center;color:{{color}}"></i> pixel @@ X: {{x}}, Y: {{y}}</small>
		</div>
	</div>
</script>

<script id="errorNotifyTemplate" type="text/html">
	<div class="toast bg-danger mb-0" role="alert" aria-live="assertive" aria-atomic="true" data-delay="2500">
		<div class="toast-body">
			<small class="text-white"><i class="fal fa-exclamation-triangle"></i> {{Message}}</small>
		</div>
	</div>
</script>

<script id="prizeNotifyTemplate" type="text/html">
	<div class="toast bg-warning mb-0" role="alert" aria-live="assertive" aria-atomic="true" data-delay="10000">
		<div class="toast-header">
			<strong class="mr-auto text-warning"><i class="fa fa-trophy"></i> {{Name}}</strong>
			<small class="text-muted">just now</small>
			<button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
				<span aria-hidden="true">&times;</span>
			</button>
		</div>
		<div class="toast-body">
			<div class="text-center text-light">
				Congratulations you have won!
			</div>
			<div class="text-center text-light">
				<b style="font-size: larger">{{Description}}</b>
			</div>
		</div>
	</div>
</script>


<script id="awardNotifyTemplate" type="text/html">
	<div class="toast bg-warning mb-0" role="alert" aria-live="assertive" aria-atomic="true" data-delay="10000">
		<div class="toast-header">
			<strong class="mr-auto text-warning"><i class="fa fa-trophy"></i> {{Level}} Award</strong>
			<small class="text-muted">just now</small>
			<button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
				<span aria-hidden="true">&times;</span>
			</button>
		</div>
		<div class="toast-body">
			<div class="text-center text-light">
				Congratulations you have won!
			</div>
			<div class="text-center text-light">
				<b style="font-size: larger">{{Name}} - {{Points}} points</b>
			</div>
		</div>
	</div>
</script>


@section Scripts {


	<script>
		(async ($) => {


			const gameSettings = {
				gameId: @gameId,
				width: @width,
				height: @height,
				player: '@User.Identity.Name',
				teamRequired: @Json.Encode(teamRequired),
				teamColor: '@teamColor',
				gameEndTime: @gameEndTimeUnix,
				dateTimeNow: @dateTimeNowUnix,
			};

			const userSettings = store.get("gameSettings")	|| {
				color: '#000000',
				maxPoints: 2,
				showNotifications: true,
				showTransparent: true,
				showOverlay: false,

				showPixelLog: true,
				showPrizeLog: true,
				showErrorLog: true,
				showChatLog: true
			};

			const saveSettings = () => {
				store.set("gameSettings", userSettings);
			}

			const loadSettings = () => {
				setSelectedColor(gameSettings.teamColor || userSettings.color);
				$("#max-points").val(userSettings.maxPoints);

				$("#log-toggle-pixel").prop("checked", userSettings.showPixelLog);
				$("#log-toggle-prize").prop("checked", userSettings.showPrizeLog);
				$("#log-toggle-error").prop("checked", userSettings.showErrorLog);
				$("#log-toggle-chat").prop("checked", userSettings.showChatLog);

				$("#transparent-toggle").prop("checked", userSettings.showTransparent);
				$("#overlay-toggle").prop("checked", userSettings.showOverlay);
				$("#notifications-toggle").prop("checked", userSettings.showNotifications);
				$("#jump-x, #jump-y").val(null);

				toggleOverlay();
				toggleTransparentBackground();
			}


			const pixelHub = $.connection.pixelHub;
			const gameCanvas = document.getElementById('mainCanvas');
			const gameCanvasContext = gameCanvas.getContext('2d');
			const canvasContainer = $("#canvas-container");
			const canvasScrollContainer = $("#canvas-scroll-container");
			const locationMarker = $("#pixel-finder");
			const pixelOverlay = $("#pixel-overlay");

			let gameScale = 1;
			let eyedropperEnabled = false;


			const initializeGame = async () => {
				setGameCountDown();
				await resetCanvas()

				pixelHub.client.OnNotifyPixel = onNotifyPixel;
				pixelHub.client.OnNotifyPrize = onNotifyPrize;
				pixelHub.client.OnNotifyAward = onNotifyAward;
				pixelHub.client.OnUserNotifyPoints = onUserNotifyPoints;
				pixelHub.client.OnUserNotifyPrize = onUserNotifyPrize;
				pixelHub.client.OnUserNotifyAward = onUserNotifyAward;
				pixelHub.client.OnChatMessage = onChatMessage;
				await $.connection.hub.start();
				await pixelHub.server.joinGame(gameSettings.gameId);

				// Setup Mouse Events
				gameCanvas.addEventListener('mousedown', function (e) { e.preventDefault(); }, false);
				gameCanvas.addEventListener('click', processLeftClick);
				gameCanvas.addEventListener('contextmenu', processRightClick, false);
				gameCanvas.addEventListener('mousemove', processMove, false);

				locationMarker.on("click", function () {
					locationMarker.hide();
				});
			}


			const resetCanvas = async () => {
				gameCanvas.height = gameSettings.height * gameScale;
				gameCanvas.width = gameSettings.width * gameScale;
				gameCanvas.style.backgroundImage = `url('../Content/Images/Games/${gameSettings.gameId}/background.png?v=${getCacheVersion()}')`;
				canvasContainer.css({ width: gameCanvas.width, height:gameCanvas.height });
				gameCanvasContext.setTransform(1, 0, 0, 1, 0, 0);
				gameCanvasContext.clearRect(0, 0, gameCanvas.width, gameCanvas.height);
				gameCanvasContext.scale(gameScale, gameScale);
				await getServerPixels();
			}

			const scaleCanvas = async (scaleValue) => {
				gameScale = scaleValue
				await resetCanvas();
				canvasContainer.removeClass("scale-1 scale-5 scale-10 scale-15");
				canvasContainer.addClass("scale-" + gameScale);

				pixelOverlay.removeClass("scale-1 scale-5 scale-10 scale-15");
				pixelOverlay.addClass("scale-" + gameScale);
			}


			const processLeftClick = async (mouseEvent) => {
				mouseEvent.preventDefault();
				mouseEvent.stopImmediatePropagation();

				const location = getCanvasLocation(gameCanvas, gameScale, mouseEvent);
				const getPixelRequest = {
					gameId: gameSettings.gameId,
					x: location.x,
					y: location.y
				}

				const pixelResponse = await getServerPixel(getPixelRequest);
				if (pixelResponse === undefined) {
					return;
				}
				setSelectedPixel(pixelResponse);
			}


			const processRightClick =  async (mouseEvent) => {
				mouseEvent.preventDefault();
				mouseEvent.stopImmediatePropagation();

				const location = getCanvasLocation(gameCanvas, gameScale, mouseEvent);
				let addPixelRequest = {
					gameId: gameSettings.gameId,
					x: location.x,
					y: location.y,
					color: userSettings.color,
					maxPoints: userSettings.maxPoints
				}
				await addServerPixel(addPixelRequest);
			}


			const processMove = async (mouseEvent) => {
				const location = getCanvasLocation(gameCanvas, gameScale, mouseEvent);
				setLocation(location)
			}


			const addServerPixel = async (data) => {
				if (gameSettings.player.length == 0) {
					notifyError("You must be logged in to create pixels.");
					return;
				}
				if (gameSettings.teamRequired === true) {
					notifyError("Please choose a team.");
					return;
				}
				const result = await pixelHub.server.addPixel(data);
				if (result.Success == false) {
					notifyError(result.Message);
					return;
				}
				notifyPixel(data);
			}

			const getServerPixel = async (data) => {
				const result = await pixelHub.server.getPixel(data);
				if (result.Success == false) {
					notifyError(result.Message);
					return;
				}
				return result.Data;
			}

			const getServerPixels = async () => {
				const pixelUpdates = await getJson('/Game/GetPixels?gameId=' + gameSettings.gameId) || [];
				for (let pixel of pixelUpdates) {
					addCanvasPixel(gameCanvasContext, pixel.X, pixel.Y, pixel.Color);
				}
			}

			const onNotifyPixel = async (notification) => {
				addCanvasPixel(gameCanvasContext, notification.X, notification.Y, notification.Color);
				updateSelectedPixel(notification);
			}

			const onNotifyPrize = async (notification) => {

			}

			const onNotifyAward = async (notification) => {

			}

			const onUserNotifyPoints = async (notification) => {
				$("#user-points").text(notification.Points);
			}

			const onUserNotifyPrize = async (notification) => {
				notifyPrize(notification);
			}

			const onUserNotifyAward = async (notification) => {
				notifyAward(notification);
			}

			const onChatMessage = async (message) => {

			}



			const toggleTransparentBackground = () => {
				canvasContainer.removeClass("checker-board");
				if (userSettings.showTransparent === true) {
					canvasContainer.addClass("checker-board");
				}
			}

			const toggleOverlay = () => {
				pixelOverlay.removeClass("grid-board");
				if (userSettings.showOverlay === true) {
					pixelOverlay.addClass("grid-board");
				}
			}

			const jumpToLocation = (x, y) => {
				const posx = x * gameScale;
				const posy = y * gameScale;
				const containerWidth = canvasScrollContainer.width();
				const containerHeight = canvasScrollContainer.height();

				const deltaX = containerWidth / 8;
				const deltaY = containerHeight / 8;
				if (posx > (containerWidth - deltaX) || posx < (containerWidth - deltaX)) {
						canvasScrollContainer.scrollLeft(posx - (containerWidth / 2));
				}

				if (posy > (containerHeight - deltaY) || posy < (containerHeight - deltaY)) {
				 canvasScrollContainer.scrollTop(posy - (containerHeight / 2));
				}

				if (gameScale == 1) {
					locationMarker.css({ left: posx - 7, top: posy - 17, "font-size": "14px" }).show();
				}
				else if (gameScale == 5) {
					locationMarker.css({ left: posx - 5, top: posy - 20, "font-size": "18px" }).show();
				}
				else if (gameScale == 10) {
					locationMarker.css({ left: posx - 2, top: posy - 20, "font-size": "20px" }).show();
				}
				else if (gameScale == 15) {
					locationMarker.css({ left: posx, top: posy - 20, "font-size": "22px" }).show();
				}
			}

			const prizeNotifyTemplate = $("#prizeNotifyTemplate").html();
			const awardNotifyTemplate = $("#awardNotifyTemplate").html();
			const errorNotifyTemplate = $("#errorNotifyTemplate").html();
			const infoNotifyTemplate = $("#infoNotifyTemplate").html();


			const setLocation = (location) => {
				$("#location-x").text(location.x);
				$("#location-y").text(location.y);
			}

			const setSelectedPixel = (pixel) => {
				$("#selected-x").text(pixel.X);
				$("#selected-y").text(pixel.Y);
				$("#selected-color").text(pixel.Color);
				if (eyedropperEnabled === true) {
					setSelectedColor(pixel.Color);
				}

				if (pixel.Type == 2) {
					$("#selected-points,#selected-user").html("<small><i>Game Pixel</i></small>");
					return;
				}

				$("#selected-points").html(pixel.Points);
				if (pixel.Type == 0) {
					$("#selected-user").html("<small><i>Empty Pixel</i></small>");
					return;
				}

				$("#selected-user").html(pixel.Player);
			}

			const updateSelectedPixel = (pixel) => {
				const selectedX = $("#selected-x").text();
				const selectedY = $("#selected-y").text();
				if (selectedX == pixel.X && selectedY == pixel.Y) {
					$("#selected-owner").text(pixel.Player);
					$("#selected-points").text(pixel.Points);
				}
			}




			const notifyPixel = (notification) => {
				if (userSettings.showPixelLog === false) {
					return;
				}
				$("#toast-container").prepend($(Mustache.render(infoNotifyTemplate, notification)).toast('show'));
			};

			const notifyPrize = (notification) => {
				if (userSettings.showPrizeLog === false) {
					return;
				}
				$("#toast-container").prepend($(Mustache.render(prizeNotifyTemplate, notification)).toast('show'));
			};

			const notifyAward = (notification) => {
				if (userSettings.showPrizeLog === false) {
					return;
				}
				notification.Level = Enums.GetName(Enums.AwardType, notification.Level);
				$("#toast-container").prepend($(Mustache.render(awardNotifyTemplate, notification)).toast('show'));
			};

			const notifyError = (error) => {
				if (userSettings.showErrorLog === false) {
					return;
				}
				$("#toast-container").prepend($(Mustache.render(errorNotifyTemplate, {Message: error})).toast('show'));
			};




			$("#log-toggle-pixel").on("click", function () {
				userSettings.showPixelLog = $(this).is(":checked");
				saveSettings();
			});

			$("#log-toggle-prize").on("click", function () {
				userSettings.showPrizeLog = $(this).is(":checked");
				saveSettings();
			});

			$("#log-toggle-error").on("click", function () {
				userSettings.showErrorLog = $(this).is(":checked");
				saveSettings();
			});


			$("#max-points").on("keyup change paste", function () {
				const value = Number($(this).val()) || 1;
				userSettings.maxPoints = Math.max(1, value);
				saveSettings();
			});


			const setSelectedColor = (color) => {
				userSettings.color = color;
				saveSettings();
				$("#color-dropdown").spectrum("set", color);
				$("#color-picker-selected, #color-dropdown-selected").css("background-color", color);
			}


			$(".pixel-zoom").on("click", async function () {
				$(".pixel-zoom").attr("disabled", "disabled");
				locationMarker.hide();
				const _this = $(this);
				await scaleCanvas(_this.data("scale"));
				$(".pixel-zoom").removeAttr("disabled").removeClass("btn-warning");
				_this.attr("disabled", "disabled").addClass("btn-warning");
			});


			$("#transparent-toggle").on("click", async function () {
				userSettings.showTransparent = $(this).is(":checked");
				saveSettings();
				toggleTransparentBackground();
			})

			$("#overlay-toggle").on("click", async function () {
				userSettings.showOverlay = $(this).is(":checked");
				saveSettings();
				toggleOverlay();
			})

			$("#notifications-toggle").on("click", async function () {
				userSettings.showNotifications = $(this).is(":checked");
				saveSettings();
			})


			$(".color-picker-item").on("click", function () {
				setSelectedColor($(this).data("color"));
			});

			$("#color-dropdown").spectrum({
				showPalette: true,
				showSelectionPalette: true,
				hideAfterPaletteSelect:true,
				preferredFormat: "hex",
				showInput: true,
				palette: [ "#FFFFFF","#000000","#FF0000","#00FF00","#0000FF","#FFFF00"],
				change: function(color) {
					setSelectedColor(color.toHexString());
				}
			});



			$("#eyedrop-toggle").on("click", function () {
				const _this = $(this);
				const isDisabled = _this.hasClass("disabled");
				if (isDisabled === true) {
					_this.removeClass("disabled").addClass("btn-warning");
					eyedropperEnabled = true;
					return;
				}

				_this.addClass("disabled").removeClass("btn-warning");
					eyedropperEnabled = false;
			});


			$("#prizes-modal").on("click", async function () {
				await openModalGet("/Prizes/ViewPrizesModal", { gameId: gameSettings.gameId });
			});



			$("#jump-send").on("click", function () {
				const posX = Number($("#jump-x").val()) || 0;
				const posY = Number($("#jump-y").val() || 0);
				if (posX < 0 || posX > (gameSettings.width - 1)) {
					$("#jump-x").addClass("text-danger");
					locationMarker.hide();
					return;
				}
				if (posY < 0 || posY > (gameSettings.height - 1)) {
					$("#jump-y").addClass("text-danger");
					locationMarker.hide();
					return;
				}

				$("#jump-x, #jump-y").removeClass("text-danger")
				jumpToLocation(posX, posY);
			});


			$(".selected-pos").on("click", function () {
				$("#jump-x").val($("#selected-x").text());
				$("#jump-y").val($("#selected-y").text());
			})

			$(".change-team").on("click", async function () {
				const result = await openModalGet("/Game/ChangeTeamModal", { gameId: gameSettings.gameId });
				if (result.Success === true) {
					location.reload();
				}
			});

			const setGameCountDown = () => {
				if (gameSettings.gameEndTime == 0 || gameSettings.dateTimeNow == 0) {
					return;
				}

				const interval = 1000;
				const diffTime = gameSettings.gameEndTime - gameSettings.dateTimeNow;
				let duration = moment.duration(diffTime, 'milliseconds');
				setInterval(() => {
					duration = moment.duration(duration - interval, 'milliseconds');
					$('.countdown').text(formatDuration(duration));
				}, interval);
			}

			loadSettings();
			initializeGame();
		})(jQuery);

	</script>
}
